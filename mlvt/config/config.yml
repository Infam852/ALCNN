Cats_vs_Dogs_resnet34:
  dataset: Dogs vs Cats
  description: "This dataset contains images of Dogs and Cats.
    Images have been splitted into 4 sets: unlabelled, validation, train
    and test with 3998, 3988, 11496, 7817 images respectively"

  general:
    model_name: resnet34
    image_size: 256   # wielkość obrazów po zastosowaniu wstępnego przetwarzania
    label_mapping:    # odwzorowanie pomiędzy nazwą klasy a ich numeryczną wartością
      Cat: 0
      Dog: 1
    unknown: 255      # etykieta nieużywana przez model, określa obraz nieetykietowany w plikach zawierających etykiety

  paths:
    server_base: ['.', 'mlvt', 'server', 'static']   # ścieżka bazowa serwera
    data_base: ['.', 'data']                         # ścieżka bazowa nieprzetworzonego zbioru obrazów
    annotations: # prefix server_base będzie dodany do poniższych ścieżek
      dir: [cats_vs_dogs, annotations]               # katalog bazowy plików zawierających etykiety
      unl: unl.json                                  # plik zawierający ścieżki do obrazów nieetykietowanych
      train: train.json                              # plik zawierający ścieżki do zbioru uczącego
      validation: validation.json                    # plik zawierający ścieżki do zbioru walidacyjnego
      test: test.json                                # plik zawierający ścieżki do zbioru testowego
    models: # prefix server_base będzie dodany do poniższych ścieżek
      best: [cats_vs_dogs, models, 'resnet34', cats_vs_dogs_best.pt]          # ścieżka pod którą zapisywany będzie "najlepszy" model
      training: [cats_vs_dogs, models, 'resnet34', cats_vs_dogs_training.pt]  # ścieżka pod którą zapisywany będzie ostatni stan modelu
    images:
      raw:  # prefix data_base będzie dodany do poniższych ścieżek, katalogi zawierający nieprzetworzone obrazy
        unl: [PetImages, unlabelled]                 # nieetykietowane
        train: [PetImages, train]                    # ze zbioru uczącego
        validation: [PetImages, valid]               # ze zbioru walidacyjnego
        test: [PetImages, test]                      # ze zbioru testowego
      transformed:  # prefix server_base będzie dodany do poniższych ścieżek, katalogi zawierający przetworzone obrazy
        unl: [cats_vs_dogs, images_tranformed]       # nieetykietowane
        train: [cats_vs_dogs, images_train]          # ze zbioru uczącego
        validation: [cats_vs_dogs, images_valid]     # ze zbioru walidacyjnego
        test: [cats_vs_dogs, images_test]            # ze zbioru testowego
    data:  # prefix server_base będzie dodany do poniższych ścieżek
      train_results: [cats_vs_dogs, data, resnet34, train_results.json]     # plik zawierający wyniki procesu trenowania
      test_results: [cats_vs_dogs, data, resnet34, test_results.json]       # plik zawierający wyniki procesu testowania
      predictions: [cats_vs_dogs, data, resnet34, predictions.json]         # plik zawierający ostatni proces predykcji modelu
      last_user_test: [json, resnet34, last_user_test.json]                 # plik zawierający wyniki testów użytkownika z użyciem jego własnych obrazów

  train:
    predictions: 10   # domyślna ilośc obrazów wyświetlana ożytkownikowi
    epochs: 10        # domyślna ilośc epok
    batch_size: 128   # domyślna wielkość paczki danych

  test:
    outputs: 18       # ilość obrazów wyświetlana użytkownikowi podczas testowania


Cats_vs_Dogs_resnet18:
  dataset: Dogs vs Cats
  description: "This dataset contains images of Dogs and Cats.
    Images have been splitted into 4 sets: unlabelled, validation, train
    and test with 3998, 3988, 11496, 7817 images respectively"

  general:
    model_name: resnet18
    image_size: 256   # wielkość obrazów po zastosowaniu wstępnego przetwarzania
    label_mapping:    # odwzorowanie pomiędzy nazwą klasy a ich numeryczną wartością
      Cat: 0
      Dog: 1
    unknown: 255      # etykieta nieużywana przez model, określa obraz nieetykietowany w plikach zawierających etykiety

  paths:
    server_base: ['.', 'mlvt', 'server', 'static']   # ścieżka bazowa serwera
    data_base: ['.', 'data']                         # ścieżka bazowa nieprzetworzonego zbioru obrazów
    annotations: # prefix server_base będzie dodany do poniższych ścieżek
      dir: [cats_vs_dogs, annotations]               # katalog bazowy plików zawierających etykiety
      unl: unl.json                                  # plik zawierający ścieżki do obrazów nieetykietowanych
      train: train.json                              # plik zawierający ścieżki do zbioru uczącego
      validation: validation.json                    # plik zawierający ścieżki do zbioru walidacyjnego
      test: test.json                                # plik zawierający ścieżki do zbioru testowego
    models: # prefix server_base będzie dodany do poniższych ścieżek
      best: [cats_vs_dogs, models, cats_vs_dogs_r18_best.pt]          # ścieżka pod którą zapisywany będzie "najlepszy" model
      training: [cats_vs_dogs, models, cats_vs_dogs_r18_training.pt]  # ścieżka pod którą zapisywany będzie ostatni stan modelu
    images:
      raw:  # prefix data_base będzie dodany do poniższych ścieżek, katalogi zawierający nieprzetworzone obrazy
        unl: [PetImages, unlabelled]                 # nieetykietowane
        train: [PetImages, train]                    # ze zbioru uczącego
        validation: [PetImages, valid]               # ze zbioru walidacyjnego
        test: [PetImages, test]                      # ze zbioru testowego
      transformed:  # prefix server_base będzie dodany do poniższych ścieżek, katalogi zawierający przetworzone obrazy
        unl: [cats_vs_dogs, images_tranformed]       # nieetykietowane
        train: [cats_vs_dogs, images_train]          # ze zbioru uczącego
        validation: [cats_vs_dogs, images_valid]     # ze zbioru walidacyjnego
        test: [cats_vs_dogs, images_test]            # ze zbioru testowego
    data:  # prefix server_base będzie dodany do poniższych ścieżek
      train_results: [cats_vs_dogs, data, train_results.json]     # plik zawierający wyniki procesu trenowania
      test_results: [cats_vs_dogs, data, test_results.json]       # plik zawierający wyniki procesu testowania
      predictions: [cats_vs_dogs, data, predictions.json]         # plik zawierający ostatni proces predykcji modelu
      last_user_test: [json, last_user_test.json]                 # plik zawierający wyniki testów użytkownika z użyciem jego własnych obrazów

  train:
    predictions: 10   # domyślna ilośc obrazów wyświetlana ożytkownikowi
    epochs: 10        # domyślna ilośc epok
    batch_size: 128   # domyślna wielkość paczki danych

  test:
    outputs: 18       # ilość obrazów wyświetlana użytkownikowi podczas testowania


Cats_vs_Dogs_mobilenet:
  dataset: Dogs vs Cats
  description: "This dataset contains images of Dogs and Cats.
    Images have been splitted into 4 sets: unlabelled, validation, train
    and test with 3998, 3988, 11496, 7817 images respectively"

  general:
    model_name: mobilenet_v2
    image_size: 256   # wielkość obrazów po zastosowaniu wstępnego przetwarzania
    label_mapping:    # odwzorowanie pomiędzy nazwą klasy a ich numeryczną wartością
      Cat: 0
      Dog: 1
    unknown: 255      # etykieta nieużywana przez model, określa obraz nieetykietowany w plikach zawierających etykiety

  paths:
    server_base: ['.', 'mlvt', 'server', 'static', 'cats_vs_dogs']   # ścieżka bazowa serwera
    data_base: ['.', 'data']                         # ścieżka bazowa nieprzetworzonego zbioru obrazów
    annotations: # prefix server_base będzie dodany do poniższych ścieżek
      dir: [annotations]               # katalog bazowy plików zawierających etykiety
      unl: unl.json                                  # plik zawierający ścieżki do obrazów nieetykietowanych
      train: train.json                              # plik zawierający ścieżki do zbioru uczącego
      validation: validation.json                    # plik zawierający ścieżki do zbioru walidacyjnego
      test: test.json                                # plik zawierający ścieżki do zbioru testowego
    models: # prefix server_base będzie dodany do poniższych ścieżek
      best: [cats_vs_dogs, models, mobilenet, cats_vs_dogs_r18_best.pt]          # ścieżka pod którą zapisywany będzie "najlepszy" model
      training: [cats_vs_dogs, models, mobilenet, cats_vs_dogs_r18_training.pt]  # ścieżka pod którą zapisywany będzie ostatni stan modelu
    images:
      raw:  # prefix data_base będzie dodany do poniższych ścieżek, katalogi zawierający nieprzetworzone obrazy
        unl: [PetImages, unlabelled]                 # nieetykietowane
        train: [PetImages, train]                    # ze zbioru uczącego
        validation: [PetImages, valid]               # ze zbioru walidacyjnego
        test: [PetImages, test]                      # ze zbioru testowego
      transformed:  # prefix server_base będzie dodany do poniższych ścieżek, katalogi zawierający przetworzone obrazy
        unl: [images_tranformed]       # nieetykietowane
        train: [images_train]          # ze zbioru uczącego
        validation: [images_valid]     # ze zbioru walidacyjnego
        test: [images_test]            # ze zbioru testowego
    data:  # prefix server_base będzie dodany do poniższych ścieżek
      train_results: [data, mobilenet, train_results.json]     # plik zawierający wyniki procesu trenowania
      test_results: [data, mobilenet, test_results.json]       # plik zawierający wyniki procesu testowania
      predictions: [data, mobilenet, predictions.json]         # plik zawierający ostatni proces predykcji modelu
      last_user_test: [json, mobilenet, last_user_test.json]                 # plik zawierający wyniki testów użytkownika z użyciem jego własnych obrazów

  train:
    predictions: 10   # domyślna ilośc obrazów wyświetlana ożytkownikowi
    epochs: 10        # domyślna ilośc epok
    batch_size: 128   # domyślna wielkość paczki danych

  test:
    outputs: 18       # ilość obrazów wyświetlana użytkownikowi podczas testowania


Cats_vs_Dogs_alexnet:
  dataset: Dogs vs Cats
  description: "This dataset contains images of Dogs and Cats.
    Images have been splitted into 4 sets: unlabelled, validation, train
    and test with 3998, 3988, 11496, 7817 images respectively"

  general:
    model_name: alexnet
    image_size: 256   # wielkość obrazów po zastosowaniu wstępnego przetwarzania
    label_mapping:    # odwzorowanie pomiędzy nazwą klasy a ich numeryczną wartością
      Cat: 0
      Dog: 1
    unknown: 255      # etykieta nieużywana przez model, określa obraz nieetykietowany w plikach zawierających etykiety

  paths:
    server_base: ['.', 'mlvt', 'server', 'static', 'cats_vs_dogs']   # ścieżka bazowa serwera
    data_base: ['.', 'data']                         # ścieżka bazowa nieprzetworzonego zbioru obrazów
    annotations: # prefix server_base będzie dodany do poniższych ścieżek
      dir: [annotations]               # katalog bazowy plików zawierających etykiety
      unl: unl.json                                  # plik zawierający ścieżki do obrazów nieetykietowanych
      train: train.json                              # plik zawierający ścieżki do zbioru uczącego
      validation: validation.json                    # plik zawierający ścieżki do zbioru walidacyjnego
      test: test.json                                # plik zawierający ścieżki do zbioru testowego
    models: # prefix server_base będzie dodany do poniższych ścieżek
      best: [cats_vs_dogs, models, alexnet, cats_vs_dogs_best.pt]          # ścieżka pod którą zapisywany będzie "najlepszy" model
      training: [cats_vs_dogs, models, alexnet, cats_vs_dogs_training.pt]  # ścieżka pod którą zapisywany będzie ostatni stan modelu
    images:
      raw:  # prefix data_base będzie dodany do poniższych ścieżek, katalogi zawierający nieprzetworzone obrazy
        unl: [PetImages, unlabelled]                 # nieetykietowane
        train: [PetImages, train]                    # ze zbioru uczącego
        validation: [PetImages, valid]               # ze zbioru walidacyjnego
        test: [PetImages, test]                      # ze zbioru testowego
      transformed:  # prefix server_base będzie dodany do poniższych ścieżek, katalogi zawierający przetworzone obrazy
        unl: [images_tranformed]       # nieetykietowane
        train: [images_train]          # ze zbioru uczącego
        validation: [images_valid]     # ze zbioru walidacyjnego
        test: [images_test]            # ze zbioru testowego
    data:  # prefix server_base będzie dodany do poniższych ścieżek
      train_results: [data, alexnet, train_results.json]     # plik zawierający wyniki procesu trenowania
      test_results: [data, alexnet, test_results.json]       # plik zawierający wyniki procesu testowania
      predictions: [data, alexnet, predictions.json]         # plik zawierający ostatni proces predykcji modelu
      last_user_test: [json, alexnet, last_user_test.json]                 # plik zawierający wyniki testów użytkownika z użyciem jego własnych obrazów

  train:
    predictions: 10   # domyślna ilośc obrazów wyświetlana ożytkownikowi
    epochs: 10        # domyślna ilośc epok
    batch_size: 128   # domyślna wielkość paczki danych

  test:
    outputs: 18       # ilość obrazów wyświetlana użytkownikowi podczas testowania

Cars_vs_Aircrafts:
  dataset: Cars vs Aircrafts
  description: Cars and Aircrafts dataset.

  general:
    model_name: resnet34
    image_size: 256
    label_mapping:
      Aircraft: 0
      Car: 1
    unknown: 255

  paths:
    server_base: ['.', 'mlvt', 'server', 'static', 'cars_aircrafts']
    data_base: ['.', 'data', CarsAircrafts]
    annotations: # server base prefix will be added
      dir: [annotations]
      unl: unl.json
      train: train.json
      test: test.json
      validation: validation.json
    models: # server base prefix will be added
      best: [models, cars_aircrafts_best.pt]
      training: [models, cars_aircrafts_training.pt]
    images:
      raw:  # data base prefix will be added
        unl: [unlabelled]
        test: [test]
        train: [train]
        validation: [valid]
      transformed:  # server base prefix will be added
        unl: [images_tranformed]
        test: [images_test]
        train: [images_train]
        validation: [images_valid]
    data:  # server base prefix will be added
      train_results: [data, train_results.json]
      test_results: [data, test_results.json]
      predictions: [data, predictions.json]
      last_user_test: [data, last_user_test.json]

  train:
    predictions: 12
    epochs: 10
    batch_size: 128

  test:
    outputs: 18


Audi_vs_BMW:
  dataset: Audi vs BMW
  description: Dataset that contains images of BMW and Audi cars

  general:
    model_name: resnet34
    image_size: 256
    label_mapping:
      audi: 0
      bmw: 1
    unknown: 255

  paths:
    server_base: ['.', 'mlvt', 'server', 'static']
    data_base: ['.', 'data']
    annotations: # server base prefix will be added
      dir: [audi_vs_bmw, annotations]
      unl: unl.json
      train: train.json
      test: test.json
      validation: validation.json
    models: # server base prefix will be added
      training: [audi_vs_bmw, models, audi_vs_bmw_training.pt]
      best: [audi_vs_bmw, models, audi_vs_bmw_best.pt]
    images:
      raw:  # data base prefix will be added
        unl: [audi_vs_bmw, unlabelled]
        test: [audi_vs_bmw, test]
        train: [audi_vs_bmw, train]
        validation: [audi_vs_bmw, valid]
      transformed:  # server base prefix will be added
        unl: [audi_vs_bmw, images_tranformed]
        test: [audi_vs_bmw, images_test]
        train: [audi_vs_bmw, images_train]
        validation: [audi_vs_bmw, images_valid]
    data:  # server base prefix will be added
      train_results: [audi_vs_bmw, data, train_results.json]
      test_results: [audi_vs_bmw, data, test_results.json]
      predictions: [audi_vs_bmw, data, predictions.json]
      last_user_test: [json, last_user_test.json]

  train:
    predictions: 10
    epochs: 10
    batch_size: 128

  test:
    outputs: 18


Male_vs_Famale:
  dataset: Male vs Famale
  description: Males and Famales images.

  general:
    model_name: resnet34
    image_size: 256
    label_mapping:
      famale: 0
      male: 1
    unknown: 255

  paths:
    server_base: ['.', 'mlvt', 'server', 'static']
    data_base: ['.', 'data']
    annotations: # server base prefix will be added
      dir: [male_vs_famale, annotations]
      unl: unl.json
      train: train.json
      test: test.json
      validation: validation.json
    models: # server base prefix will be added
      training: [male_vs_famale, models, male_vs_famale_training.pt]
      best: [male_vs_famale, models, male_vs_famale_raw.pt]
    images:
      raw:  # data base prefix will be added
        unl: [MaleFamale, unlabelled]
        test: [MaleFamale, test]
        train: [MaleFamale, train]
        validation: [MaleFamale, valid]
      transformed:  # server base prefix will be added
        unl: [male_vs_famale, images_tranformed]
        test: [male_vs_famale, images_test]
        train: [male_vs_famale, images_train]
        validation: [male_vs_famale, images_valid]
    data:  # server base prefix will be added
      train_results: [male_vs_famale, data, train_results.json]
      test_results: [male_vs_famale, data, test_results.json]
      predictions: [male_vs_famale, data, predictions.json]
      last_user_test: [json, last_user_test.json]

  train:
    predictions: 10
    epochs: 10
    batch_size: 128

  test:
    outputs: 18
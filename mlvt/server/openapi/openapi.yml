openapi: 3.0.1
info:
  title: MLVT (Machine Learning Visulization Tool)
  description: API for simple HTTP server that visualize machine learning process
  version: 0.1.1

components:
  schemas:
    Config:
      type: object
      properties:
          name:
            type: string
      additionalProperties: true
      required:
        - name

    Images:
      type: array
      description: Array with indicies of images
      items:
        type: integer

    WrongPredictions:
      description: Dictionary of wrong predictions for both classes.
      type: object
      properties:
        class1:
          type: array
          items:
            $ref: "#/components/schemas/ImagePath"
        class2:
          type: array
          items:
            $ref: "#/components/schemas/ImagePath"

    ImagePath:
      description: Path of the image
      type: string
      example: path/to/file01.png

    TrainResult:
      description: Set of metrics that describe training process
      type: object
      properties:
        loss:
          type: array
          items:
            type: number
        accuracy:
          type: array
          items:
            type: number
            minimum: 0.0
            maximum: 100.0
      additionalProperties: true

    DatasetType:
      description: dataset type
      type: string
      enum:
          - unlabelled
          - train
          - test
          - validation
          - all

    Action:
      description: type of action
      type: string
      enum:
        - train
        - test
        - predictions

  responses:
    Ongoing:
      description: There is ongoing action

paths:
  /home:
    get:
      summary: Home page
      tags:
        - extras
      responses:
        200:
          description: OK
          content:
              text/html:
                schema:
                  type: string

  /configs/:
    get:
      summary: Returns all possible configuration
      tags:
          - configuration
      responses:
        '200':
          description: List of configurations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Config'
        '404':
          description: Configuration not found

  /configs/{name}:
    get:
      summary: Returns configuration with specified name
      tags:
          - configuration
      parameters:
          - in: path
            name: name
            description: Name of the configuration to be returned
            schema:
              type: string
              example: cats_vs_dogs64
            required: true

      responses:
        '200':
          description: Configuration
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Config'
        '404':
          description: Configuration with specified name not found
    put:
      summary: Select config
      tags:
          - configuration
      parameters:
          - in: path
            name: name
            description: Name of the configuration
            schema:
              type: string
              example: cats_vs_dogs64
            required: true

      responses:
        '200':
          description: Selected configuration changed
        '404':
          description: Configuration with specified name not found


  /predictions:
    post:
      summary: Post labels annoted by the user.
      tags:
        - actions
      requestBody:
        description: pass
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WrongPredictions'
      responses:
        '200':
          description: Images with labels added to train dataset

    get:
      summary: Show subset of model predictions
      tags:
        - model
      parameters:
        - in: query
          name: new_predictions
          description: If true load new predictions
          schema:
            type: boolean
            default: False
        - in: query
          name: random
          description: If true, show random images
          schema:
            type: boolean
            default: False
        - in: query
          name: maxImages
          description: Number of images to show
          schema:
            type: integer
            minimum: 1
            maximum: 100
        - in: query
          name: balance
          description: If set to True then return the same number of predictions
            for both classes
          schema:
            type: boolean
            default: True

      responses:
          '200':
            description: Return specified number of indicies
            content:
              text/html:
                schema:
                  type: string

  /annotations/{dataset_type}:
    get:
      summary: Get dataset summary
      tags:
        - extras
      parameters:
        - in: path
          name: dataset_type
          schema:
            type: string
            allOf:
              - $ref:  "#/components/schemas/DatasetType"
              - not:
                 type: string
                 enum: ['all']
          required: true
      responses:
        200:
          description: Ok
        404:
          description: Annotation files not found

  /annotations:
    get:
      summary: Get summary of all annotation files
      tags:
        - extras
      responses:
        200:
          description: Ok
        404:
          description: Annotation files not found

    put:
      summary: Create or update existing annotation json files
      tags:
        - configuration
      parameters:
        - in: query
          name: force
          description: if set to True create parent directories
            if they do not exist
          schema:
            type: boolean
            default: True
        - in: query
          name: dataset_type
          schema:
              $ref: "#/components/schemas/DatasetType"
          required: true
        - in: query
          name: prune
          description: if set to true then firstly prune the file and
            then save the annotations
          schema:
            type: boolean
            default: True
      responses:
        200:
          description: File created or updated
        400:
          description: Failed to create a file.

  /train:
    get:
      summary: Get training result
      description: Get results for both training and validation sets
        (accuracy, loss) with number of images used to training.
        Additionaly graph with data visualization is returned.
      tags:
        - results
      parameters:
        - in: query
          name: nepochs
          description: Number of epochs to show
          schema:
            type: integer
            default: -1
            minimum: -1
        - in: query
          name: reverse
          schema:
            type: boolean
            default: False

      responses:
          200:
            description: Success
            content:
              text/html:
                schema:
                  type: string

    post:
      summary: Train model and save training summary results. It starts run lonning action
      tags:
        - actions
      parameters:
        - in: query
          name: epochs
          schema:
            type: integer
        - in: query
          name: batch_size
          schema:
            type: integer
      responses:
        202:
          description: Action started
        409:
          $ref: "#/components/responses/Ongoing"

    delete:
      summary: Remove training history
      tags:
        - results
      responses:
        200:
          description: Deleted

  /test:
    get:
      summary: Get test results
      tags:
        - results
      parameters:
        - in: query
          name: new_samples
          description: if set to True then return new test samples
          schema:
            type: boolean
            default: False
      responses:
        200:
          description: Sample results
          content:
              text/html:
                schema:
                  type: string

    post:
      summary: Start testing long running action
      tags:
        - actions
      responses:
        202:
          description: Test action started
        409:
          $ref: "#/components/responses/Ongoing"

    delete:
      summary: Remove training history
      tags:
        - results
      responses:
        200:
          description: Deleted

  /settings:
    get:
      summary: Get settings view
      tags:
        - extras
      responses:
        200:
          description: OK
          content:
              text/html:
                schema:
                  type: string

  /transform:
    put:
      summary: Copy and transform images
      tags:
        - configuration
      description: Copy images from temporary directory to the
        server file structure. Additionally apply initial
        preprocessing on images in order to speed up further
        loading.
      parameters:
        - in: query
          name: dataset_type
          schema:
            type: string
            enum: ['all', 'unlabelled', 'train', 'test', 'validation']
      responses:
        200:
          description: Images have been copied
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: array
                    items:
                      type: string
        404:
          description: Source or destination file not found

  /model:
    get:
      summary: Get model summary
      tags:
        - model
      responses:
        200:
          description: Model summary information
        404:
          description: Model not found

    delete:
      summary: Delete current model and overwrite it with
        new untrained model
      tags:
        - model
      parameters:
        - in: query
          name: clear_annotations
          description: if set to true reset remove all training annotations
          schema:
            type: boolean
            default: True
        - in: query
          name: clear_history
          description: if set to true remove all training data
          schema:
            type: boolean
            default: True
      responses:
          200:
            description: Model deleted

    put:
      summary: Restore model to its best state
      parameters:
        - in: query
          name: clear_annotations
          description: if set to true reset remove all training annotations
          schema:
            type: boolean
            default: True
        - in: query
          name: clear_history
          description: if set to true remove all training data
          schema:
            type: boolean
            default: True
      tags:
        - model
      responses:
        200:
          description: Model has been saved

  /status/{action}:
    get:
      summary: Return action status.
      tags:
        - actions
      parameters:
        - in: path
          name: action
          schema:
            $ref: "#/components/schemas/Action"
          required: true
      responses:
        200:
          description: State of the action with optional description. Possible status values are ongoing, failed, success
          content:
              application/json:
                schema:
                  type: object
                  properties:
                    status:
                      type: string
                      enum: [ongoing, failed, success]
                      example: ongoing
                    data:
                      type: string
                      example: Actions is not finshed yet.
                  required:
                    - status
        404:
          description: Action not found
        400:
          description: Bad request

  /data/{datatype}:
    get:
      summary: Serve data to the client
      tags:
        - extras
      parameters:
        - in: path
          name: datatype
          description: type of requested data
          schema:
            type: string
            enum:
              - train_results
          required: true
      responses:
        200:
          description: Ok


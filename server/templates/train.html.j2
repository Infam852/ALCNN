{% extends "base.html" %}

{# import macros #}
{% from 'macros.html.j2' import badge_accuracy %}
{% from 'macros.html.j2' import badge_loss %}
{% from 'macros.html.j2' import header %}

{% block title %}
    Train
{% endblock title %}

{% block header %}
    <h1>Train</h1>
{% endblock header %}

{% block content %}
    <!-- Latest compiled and minified plotly.js JavaScript -->
    <script src="https://cdn.plot.ly/plotly-latest.min.js" charset="utf-8"></script>

    <div class="container col-sm-10 mt-3 mb-4 border rounded border-secondary p-3">
    <div class="m-3">
        {{ header("Training visulalization") }}
        <div class="img-fluid mx-auto d-block">
            {# Graphs #}
            <div class="chart img-fluid mx-auto d-block" id="accGraph"></div>
            <div class="chart" id="lossGraph"></div>
        </div>
    </div>
    </div>
        <div class="container col-sm-10 mt-3 mb-4 border rounded border-secondary p-4">
        <div class="row">
            <div class="col-7 row">
                <form class="needs-validation col-12" novalidate>
                    <div class="ml-3 form-row">
                        <div class="col-ml-4">
                            <label for="epochsInput">Epochs</label>
                            <input type="number" id="epochsInput" value="{{ default_epochs }}" class="form-control" id="validationCustom01">
                        </div>
                        <div class="col-ml-4">
                            <label for="batchSizeDropdown">Batch size</label>
                            <select class="custom-select mr-sm-2" id="batchSizeDropdown">
                                <option selected>{{ default_bs }}</option>
                                <option value="1">1</option>
                                <option value="2">8</option>
                                <option value="3">16</option>
                                <option value="4">32</option>
                                <option value="5">64</option>
                                <option value="6">128</option>
                                <option value="7">256</option>
                            </select>
                        </div>
                    </div>
                </form>
            </div>
            <div class="col-5">
                <div class="row">
                    <div id="loadingSpinner" style="display: none;" class="ml-auto spinner-border text-success mr-1 mt-1" role="status">
                        <span class="sr-only">Loading...</span>
                    </div>
                    <div class="btn-group ml-auto mr-3">
                        <button type="button" onclick="post_train()" class="btn main-blue btn-lg ml-1">Train</button>
                        <button type="button" class="btn btn-danger btn-lg ml-1" data-toggle="modal" data-target="#exampleModal">
                            Delete training history
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div>
            {% if show_results %}
            {{ header("Training statistics") }}
            <div class="row justify-content-center">
                <div class="col-md-6 row justify-content-center p-3 mr-0 ml-0">
                    <h4 class="mt-2">Training</h4>
                    <div class="mt-2" data-toggle="tooltip" data-placement="bottom" title="{{ stats.tacc_description }}">
                        {{ badge_accuracy(stats.tacc) }}
                    </div>
                    <div class="mt-2" data-toggle="tooltip" data-placement="bottom" title="{{ stats.tloss_description }}">
                        {{ badge_loss(stats.tloss) }}
                    </div>
                </div>

                <div class="col-md-6 row justify-content-center p-3 mr-0 ml-0">
                    <h4 class="mt-2">Validation</h4>
                    <div class="mt-2" data-toggle="tooltip" data-placement="bottom" title="{{ stats.vacc_description }}">
                        {{ badge_accuracy(stats.vacc) }}
                    </div>
                    <div class="mt-2" data-toggle="tooltip" data-placement="bottom" title="{{ stats.vloss_description }}">
                        {{ badge_loss(stats.vloss) }}
                    </div>
                </div>
            </div>
            
        </div>
        {{ header("Training history") }}
        <div class="table-wrapper-scroll-y my-custom-scrollbar">
            <table class="table text-white table-striped">
                <thead>
                    <tr>
                        <th scope="col">Epoch</th>
                        <th scope="col">Training accuracy</th>
                        <th scope="col">Training loss</th>
                        <th scope="col">Validation accuracy</th>
                        <th scope="col">Validation loss</th>
                        <th scope="col">Images</th>
                    </tr>
                </thead>
                <tbody>
                    {% for train_acc, train_loss, val_acc, val_loss, n_images in results %}
                    <tr>
                        <th scope="row">{{ loop.index }}</th>
                        <td>{{ train_acc|round(3) }}</td>
                        <td>{{ train_loss|round(5) }}</td>
                        <td>{{ val_acc|round(3) }}</td>
                        <td>{{ val_loss|round(5) }}</td>
                        <td>{{ n_images }}</td>
                    </tr>
                    {% endfor %}
                </tbody>
            </table>
        </div>
        </div>
        {% endif %}
    </div>

<!-- Modals -->
<div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content text-dark">
      <div class="modal-header">
        <h5 class="modal-title" id="exampleModalLabel">Alert</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        Do you really want to delete training history?
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        <button type="button"  onclick="delete_train()" class="btn btn-danger">Delete</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="reloadModal" tabindex="-1" role="dialog" aria-labelledby="reloadLabel" aria-hidden="true">
<div class="modal-dialog" role="document">
    <div class="modal-content text-dark">
    <div class="modal-header">
        <h5 class="modal-title" id="reloadLabel">Alert</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
        <span aria-hidden="true">&times;</span>
        </button>
    </div>
    <div class="modal-body">
        Training is completed, do you want to reload page?
    </div>
    <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
        <button type="button"  onclick="reload()" class="btn btn-primary">Reload</button>
    </div>
    </div>
</div>
</div>

<script>
    window.onload = function() {
        pool_status(handle_status_data_no_modal);
    }

    MODEL_CREATED = false;
    function init_graph(plot_acc, plot_loss){
        console.log("INIT GRAPH: " + plot_acc)
        create_plot('accGraph', plot_acc);
        create_plot('lossGraph', plot_loss);
        
        CONTAINER_W = document.getElementById("lossGraph").offsetWidth;
        WINDOW_W = window.innerWidth;
        CONTAINER_H = document.getElementById("lossGraph").offsetHeight;
        WINDOW_H = window.innerHeight;
        rW = CONTAINER_W / WINDOW_W;
        rH = CONTAINER_H / WINDOW_H;

        window.onresize = function() {
            Plotly.relayout(lossGraph, {
                width: window.innerWidth * rW,
                height:  window.innerHeight * rH 
            })
            Plotly.relayout(accGraph, {
                width: window.innerWidth * rW,
                height:  window.innerHeight * rH
            })
        }
        MODEL_CREATED = true;
        update_plot('accGraph', {'x': [[10], [10], [10]], 'y': [[0.80], [0.80], [2]]})
    }

    {% if show_results %}
    init_graph({{ plot_acc }}, {{ plot_loss }});
    {% endif %}

    function create_plot(handlerId, graph) {
        graph = {{graph | safe}}
        Plotly.plot(handlerId, graph, {});
    }

    function update_plot(handlerId, data){
        console.log('UPDATE GRAPH')
        Plotly.extendTraces(handlerId, data, [0, 1, 2])
    }

    function post_train(){
        $("#loadingSpinner").show();
        epochs = $("#epochsInput").val();
        bs =  $("#batchSizeDropdown").val();
        console.log("Train with " + epochs + " epochs and " + bs + " batch size");
        URL = "/train?epochs=" + epochs + "&batch_size=" + bs;
        $.ajax({
            url: URL,
            type: "POST",
            success: function(){
                pool_status(handle_status_data);
            },
            error: function(xhr) {
                console.log(xhr.status)
                switch (xhr.status) {
                    case 409:
                        alert("Wait for the server to end action");
                }
            }
        })
    }

    function delete_train(){
        $.ajax({
            url: '/train',
            type: "DELETE",
            success: function(){
                location.reload(); 
            },
            error: function(xhr) {
                console.log(xhr)
            }
            });
        }

    function reload() {
        window.location.href = "/train";
    }

    // wrapper that disables modal
    function handle_status_data_no_modal(data) {
        handle_status_data(data, false);
    }

    function handle_status_data(data, show_modal = true) {
        status = data.status
        console.log('Received status: ' + status);
        if (status == 'success'){
            pool_plots();
            $("#loadingSpinner").hide();
            if (show_modal) {
                console.log("Training completed!");
            }
        }
        else if (status == 'ongoing') {
            console.log('sleep for 1.5s')
            $("#loadingSpinner").show();
            pool_plots();
            setTimeout(pool_status(handle_status_data), 1500);
        }
        else {
            console.log('status failed')
            $("#loadingSpinner").hide();
            alert('Error occured: ' + data.data)
        }
    }

    // !TODO move to external js file
    function pool_status(status_hanlder){
         $.ajax({
            url: '/status/train',
            type: "GET",
            success: function(data){
                console.log(data);
                status_hanlder(data);
            },
            error: function(err){
                $("#loadingSpinner").hide();
                alert("Error occured: " + err)
            }
        });
    }

    function pool_plots() {
        console.log("Pool plot")
        $.ajax({
            url: '/plot',
            type: "GET",
            success: function(data, _, xhr){
                switch (xhr.status) {
                    case 200:
                      if (!MODEL_CREATED){
                          $('#reloadModal').modal('show');
                      }
                      else{
                        update_plot('accGraph', {'y': [[0.80], [0.80]]})
                      }
                    case 204:
                        console.log("No update")
                }
                console.log(data);
            },
            error: function(err){
                console.log(err);
            }
        });
    }

    $(document).ready(function(){
        $('[data-toggle="tooltip"]').tooltip();
    });
</script>
{% endblock content %}